"""
Script simple para probar la funcionalidad de modo agente sin dependencias externas.
Esta versi√≥n actualizada verifica el formato estructurado de la respuesta.
"""

import requests
import warnings
import json
import os
import re
from typing import Dict, Any

# Desactivar advertencias SSL para pruebas
warnings.filterwarnings("ignore", message="Unverified HTTPS request")
requests.packages.urllib3.disable_warnings()

def get_api_key():
    """Obtiene la clave API de una variable de entorno o un archivo de configuraci√≥n."""
    try:
        # Intentar leer del archivo .streamlit/secrets.toml
        with open('.streamlit/secrets.toml', 'r') as f:
            content = f.read()
            for line in content.split('\n'):
                if line.startswith('api_key'):
                    return line.split('=')[1].strip().strip('"').strip("'")
        
        # Si no se encuentra, usar un valor de prueba
        return "sk-xYBWXr1epqP3Uq1A05qUql9tAyBsJE5F8PL5L66gBaE328VG"
    except Exception as e:
        print(f"Error al obtener la clave API: {str(e)}")
        return "sk-xYBWXr1epqP3Uq1A05qUql9tAyBsJE5F8PL5L66gBaE328VG"  # API key de prueba

def verificar_formato_agente(respuesta: Dict[str, Any]) -> bool:
    """
    Verifica que la respuesta tenga el formato estructurado del modo agente.
    
    Args:
        respuesta: Respuesta de la API
        
    Returns:
        bool: True si la respuesta tiene el formato esperado, False en caso contrario
    """
    if "choices" not in respuesta or len(respuesta["choices"]) == 0:
        print("Error: La respuesta no contiene choices")
        return False
    
    # Obtener el texto de la respuesta
    texto_respuesta = respuesta["choices"][0]["message"]["content"]
    
    # Verificar que contenga las tres secciones esperadas
    tiene_analisis = "üìä AN√ÅLISIS:" in texto_respuesta
    tiene_hallazgos = "üîç HALLAZGOS:" in texto_respuesta
    tiene_recomendaciones = "üìà RECOMENDACIONES:" in texto_respuesta
    
    # Contar el n√∫mero de secciones encontradas
    secciones_encontradas = sum([tiene_analisis, tiene_hallazgos, tiene_recomendaciones])
    
    if secciones_encontradas == 3:
        print("‚úÖ La respuesta contiene las tres secciones esperadas")
        return True
    else:
        print(f"‚ö†Ô∏è La respuesta solo contiene {secciones_encontradas} de 3 secciones esperadas")
        
        # Mostrar qu√© secciones faltan
        if not tiene_analisis:
            print("  - Falta la secci√≥n üìä AN√ÅLISIS")
        if not tiene_hallazgos:
            print("  - Falta la secci√≥n üîç HALLAZGOS")
        if not tiene_recomendaciones:
            print("  - Falta la secci√≥n üìà RECOMENDACIONES")
            
        return False

def make_api_request_agente(pregunta: str):
    """
    Realiza una petici√≥n a la API de Redpill en modo agente.
    
    Args:
        pregunta (str): Pregunta o instrucci√≥n del usuario
        
    Returns:
        dict: Respuesta de la API
    """
    api_key = get_api_key()
    api_url = "https://api.redpill.ai/v1/chat/completions"
    
    # Contexto m√≠nimo para simular datos
    contexto = """
    Eres un asistente especializado en an√°lisis de datos que ayuda a los usuarios a trabajar con archivos CSV, Excel y realizar cruces de datos.
    
    El usuario ha cargado dos archivos de datos:
    1. Archivo BASE con 5 filas y columnas: id, nombre, edad, ciudad
    2. Archivo NUEVO con 5 filas y columnas: id, nombre, salario, departamento
    
    Ejemplo de filas del Archivo BASE:
    id | nombre        | edad | ciudad
    1  | Juan P√©rez    | 25   | Madrid
    2  | Mar√≠a Garc√≠a  | 30   | Barcelona
    3  | Carlos L√≥pez  | 45   | Sevilla
    
    Ejemplo de filas del Archivo NUEVO:
    id  | nombre      | salario | departamento
    101 | Juan P.     | 25000   | Ventas
    102 | Maria G     | 30000   | Marketing
    103 | C. L√≥pez    | 45000   | IT
    
    El usuario ha seleccionado 'nombre' como campo clave para el cruce.
    Se han encontrado 5 coincidencias entre los archivos.
    """
      # Instrucciones espec√≠ficas para el modo agente - versi√≥n actualizada m√°s expl√≠cita
    instrucciones_agente = """
    Act√∫a como un agente de an√°lisis de datos especializado que puede:
    1. Interpretar datos y realizar an√°lisis b√°sicos
    2. Buscar patrones, correlaciones y tendencias en los datos
    3. Sugerir acciones espec√≠ficas basadas en el an√°lisis
    4. Responder a consultas t√©cnicas sobre los datos
    5. Explicar el significado de los resultados del cruce de datos
    6. Proponer nuevos an√°lisis o cruces que podr√≠an ser √∫tiles
    
    IMPORTANTE: DEBES responder SIEMPRE utilizando EXACTAMENTE el siguiente formato estructurado:

    üìä AN√ÅLISIS:
    [Breve resumen de tu interpretaci√≥n de los datos]

    üîç HALLAZGOS:
    1. [Primer hallazgo importante]
    2. [Segundo hallazgo importante]
    3. [M√°s hallazgos si corresponde]

    üìà RECOMENDACIONES:
    - [Primera recomendaci√≥n concreta]
    - [Segunda recomendaci√≥n concreta]
    - [M√°s recomendaciones si corresponde]
    
    No omitas ninguna de las tres secciones y mant√©n siempre este formato estructurado. No utilices formato de chat informal.
    Usa lenguaje t√©cnico pero comprensible y responde siempre en espa√±ol.
    """
    
    # Enriquecer la pregunta con el contexto y las instrucciones del agente
    pregunta_enriquecida = f"{contexto}\n\n{instrucciones_agente}\n\nConsulta/Instrucci√≥n del usuario: {pregunta}\n\n"
    
    try:
        print("Enviando solicitud a la API...")
        # Uso de la biblioteca requests con verificaci√≥n SSL desactivada
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }        payload = {            "model": "mistralai/ministral-8b",
            "messages": [
                {"role": "system", "content": "Eres un agente inteligente especializado en an√°lisis de datos que ayuda a los usuarios a trabajar con archivos CSV y Excel. Puedes analizar, interpretar y actuar sobre los datos proporcionados. DEBES responder SIEMPRE utilizando un formato ESTRUCTURADO con tres secciones: AN√ÅLISIS, HALLAZGOS y RECOMENDACIONES. Nunca respondas en formato de chat informal."},
                {"role": "user", "content": pregunta_enriquecida}
            ],
            "temperature": 0.3,  # Temperatura m√°s baja para respuestas m√°s determin√≠sticas
            "max_tokens": 1500,   # Aumentado para permitir respuestas m√°s detalladas
            "response_format": {"type": "text"}  # Asegurar que la respuesta sea texto
        }
        
        print(f"URL de la API: {api_url}")
        print(f"Longitud de la pregunta: {len(pregunta_enriquecida)} caracteres")
        
        response = requests.post(
            api_url,
            headers=headers,
            json=payload,
            verify=False,  # Desactivar verificaci√≥n SSL
            timeout=30.0   # Timeout en segundos
        )
        
        print(f"C√≥digo de estado HTTP: {response.status_code}")
        
        if response.status_code != 200:
            print(f"Error: {response.text}")
            return None
            
        return response.json()
    except Exception as e:
        print(f"Error al hacer la solicitud: {str(e)}")
        return None

def main():
    print("=== Test de API en modo agente (versi√≥n mejorada) ===")
    
    # Probar la funci√≥n de agente
    pregunta = "Analiza las coincidencias entre los dos conjuntos de datos y recomienda acciones"
    print(f"Enviando pregunta al agente: '{pregunta}'")
    
    respuesta = make_api_request_agente(pregunta)
    
    if respuesta:
        # Verificar el formato de la respuesta
        formato_correcto = verificar_formato_agente(respuesta)
        
        contenido = respuesta["choices"][0]["message"]["content"]
        
        print("\n=== RESPUESTA DEL AGENTE ===")
        print(contenido)
        print("===========================")
        
        if formato_correcto:
            print("\n‚úÖ PRUEBA EXITOSA: El modo agente est√° funcionando correctamente con formato estructurado")
        else:
            print("\n‚ö†Ô∏è ADVERTENCIA: La respuesta no sigue completamente el formato estructurado esperado")
    else:
        print("\n‚ùå No se pudo obtener una respuesta del agente.")

if __name__ == "__main__":
    main()
