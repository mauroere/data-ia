import streamlit as st
import pandas as pd
import json
import os
import warnings
import requests
from typing import Optional
from utils import read_flexible_file, are_similar, normalize_column_names, get_api_key, get_api_url
from api_proxy import make_api_request_proxy
from api_context import make_api_request_contexto, guardar_dataframes_en_sesion

def make_api_request(pregunta: str) -> dict:
    """Realiza una petici√≥n a la API de Redpill.io usando un proxy personalizado"""
    api_key = get_api_key("redpill")
    api_url = get_api_url("redpill")
    
    if not api_key:
        # Intentar obtener la clave API del usuario
        st.warning("üîë No se ha encontrado la clave API de Redpill en la configuraci√≥n.")
        
        # Mostrar informaci√≥n adicional para ayudar a solucionar el problema
        with st.expander("‚ÑπÔ∏è Informaci√≥n para solucionar problemas"):
            st.markdown("""
            ### Posibles causas:
            1. **Archivo de secretos no encontrado** - Verifica que existe el archivo `.streamlit/secrets.toml`
            2. **Formato incorrecto** - El archivo debe usar el formato TOML correcto:
            ```toml
            [redpill]
            api_key = "tu-clave-api"
            api_url = "https://api.redpill.ai/v1/chat/completions"
            ```
            3. **Permisos de archivo** - Verifica que la aplicaci√≥n tiene permisos para leer el archivo
            
            ### Herramientas de diagn√≥stico:
            - Ejecuta `python debug_secrets.py` para diagnosticar problemas con el archivo de secretos
            - Ejecuta `python test_conexion_redpill_basic.py` para probar la conexi√≥n con la API
            """)
        
        api_key = st.text_input(
            "Ingresa tu clave API de Redpill:",
            type="password",
            help="La clave API se guardar√° solo para esta sesi√≥n."
        )
        
        if not api_key:
            st.error("Se requiere una clave API para continuar con el asistente conversacional.")
            st.info("Puedes seguir usando otras funcionalidades de la aplicaci√≥n que no requieren API.")
            st.stop()
        else:            # Guardar en session_state para esta sesi√≥n
            st.session_state["redpill_api_key"] = api_key
    
    # Preparar contexto de la aplicaci√≥n para enviarlo con la pregunta
    contexto = "Eres un asistente especializado en an√°lisis de datos que ayuda a los usuarios a trabajar con archivos CSV, Excel y realizar cruces de datos."
    
    # Agregar informaci√≥n sobre archivos cargados si existen
    if 'base_df' in locals() and 'new_df' in locals():
        contexto += "\n\nEl usuario ha cargado dos archivos de datos:"
        contexto += f"\n1. Archivo BASE con {len(base_df)} filas y columnas: {', '.join(base_df.columns.tolist())}"
        contexto += f"\n2. Archivo NUEVO con {len(new_df)} filas y columnas: {', '.join(new_df.columns.tolist())}"
        
        # Incluir ejemplos de datos para mejor contexto
        contexto += "\n\nEjemplo de 3 filas del Archivo BASE:"
        contexto += "\n" + base_df.head(3).to_string()
        
        contexto += "\n\nEjemplo de 3 filas del Archivo NUEVO:"
        contexto += "\n" + new_df.head(3).to_string()
    
    # Enriquecer la pregunta con el contexto de la aplicaci√≥n
    pregunta_enriquecida = f"{contexto}\n\nPregunta del usuario: {pregunta}\n\nResponde a la pregunta del usuario teniendo en cuenta el contexto proporcionado y las funcionalidades de la aplicaci√≥n para el cruce inteligente de datos."
    
    try:
        # Uso de la biblioteca requests con verificaci√≥n SSL desactivada
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        payload = {
            "model": "mistralai/ministral-8b",
            "messages": [
                {"role": "system", "content": "Eres un asistente especializado en an√°lisis y cruce de datos que ayuda a los usuarios a trabajar con archivos CSV y Excel."},
                {"role": "user", "content": pregunta_enriquecida}
            ],
            "temperature": 0.7,
            "max_tokens": 1000
        }
        
        response = requests.post(
            api_url,
            headers=headers,
            json=payload,
            verify=False,  # Desactivar verificaci√≥n SSL
            timeout=30.0   # Timeout en segundos
        )
        response.raise_for_status()
        return response.json()
    except requests.RequestException as e:
        st.error(f"Error de conexi√≥n: {str(e)}")
        raise

# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Plataforma IA de Datos", layout="wide")

# Men√∫ de navegaci√≥n
def show_navigation():
    st.sidebar.title("üß≠ Navegaci√≥n")
    option = st.sidebar.radio(
        "Selecciona una funci√≥n:",
        ["üîÑ Cruce Inteligente", "üìä Dashboard", "‚úèÔ∏è Editor", "üì§ Exportador", 
         "ü§ñ Enriquecimiento IA", "üó∫Ô∏è Mapeo de Datos", "üë• Control de Accesos"]
    )
    return option

# Reinicio de sesi√≥n
if st.sidebar.button("üîÑ Reiniciar Sesi√≥n"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.sidebar.success("Sesi√≥n reiniciada correctamente")
    st.rerun()

# Seleccionar funci√≥n a mostrar
navegacion = show_navigation()

if navegacion == "üîÑ Cruce Inteligente":
    st.title("üîÑ Cruce Inteligente de Datos")

    uploaded_file_1 = st.file_uploader("üìÅ Sub√≠ archivo BASE (existente)", type=["csv", "xls", "xlsx"])
    uploaded_file_2 = st.file_uploader("üìÅ Sub√≠ archivo NUEVO (a cruzar)", type=["csv", "xls", "xlsx"])    if uploaded_file_1 and uploaded_file_2:
        base_df = read_flexible_file(uploaded_file_1)
        new_df = read_flexible_file(uploaded_file_2)

        # Guardar los DataFrames en la sesi√≥n para uso posterior
        st.session_state["base_df"] = base_df
        st.session_state["new_df"] = new_df

        new_df.columns = normalize_column_names(new_df.columns)
        base_df.columns = normalize_column_names(base_df.columns)

        # Guardar tambi√©n las versiones normalizadas
        st.session_state["base_df_normalized"] = base_df
        st.session_state["new_df_normalized"] = new_df

        campo_clave = st.selectbox("Seleccion√° campo clave", new_df.columns)
        coincidencias = []
        if campo_clave not in base_df.columns:
            st.error(f"‚ùå La columna '{campo_clave}' no existe en la base cargada.")
            st.stop()

        for _, fila in new_df.iterrows():
            val = fila[campo_clave]
            for _, bfila in base_df.iterrows():
                if are_similar(val, bfila[campo_clave]):
                    coincidencias.append((val, bfila[campo_clave]))
                    break

        st.success(f"{len(coincidencias)} coincidencias encontradas.")
        st.dataframe(pd.DataFrame(coincidencias, columns=["Nuevo", "Base"]))
    
    # Asistente conversacional
    st.title("üí¨ Asistente Conversacional")
    pregunta = st.text_input("Hac√© una pregunta sobre la base cargada:")
    if pregunta:
        with st.spinner("Procesando..."):
            try:
                response_data = make_api_request(pregunta)
                respuesta = response_data["choices"][0]["message"]["content"]
                st.success("Respuesta del asistente:")
                st.text_area("", respuesta, height=200)
                
                # Guardar historial
                if 'historial' not in st.session_state:
                    st.session_state.historial = []
                st.session_state.historial.append((pregunta, respuesta))
            except requests.RequestException as e:
                error_message = str(e)
                if "429" in error_message:
                    st.error("""
                    ‚ùå Se ha excedido el l√≠mite de uso de la API de Redpill.io. 
                    
                    Para resolver esto:
                    1. Verifica tu saldo en el panel de control de Redpill.io
                    2. Actualiza tu plan o agrega fondos a tu cuenta
                    3. Si est√°s usando una API key de prueba, considera obtener una nueva
                    
                    Mientras tanto, puedes seguir usando las otras funcionalidades de la aplicaci√≥n.
                    """)
                elif "SSL" in error_message or "TLS" in error_message:
                    st.error("""
                    ‚ùå Error de conexi√≥n segura (SSL/TLS) al comunicarse con la API.
                    
                    Esto podr√≠a deberse a:
                    1. Problemas de red o firewall
                    2. Certificados SSL obsoletos o inv√°lidos
                    
                    Hemos configurado la aplicaci√≥n para usar conexiones no verificadas, por favor intenta nuevamente.
                    Si el problema persiste, contacta al soporte t√©cnico.
                    """)
                else:
                    st.error(f"Error al procesar la pregunta: {error_message}")
            except Exception as e:
                st.error(f"Error inesperado: {str(e)}")
                st.info("Intenta de nuevo o prueba con una pregunta diferente.")

    # Historial de interacciones
    if 'historial' in st.session_state and st.session_state.historial:
        st.title("üïì Historial de Interacciones")
        for i, (p, r) in enumerate(st.session_state.historial):
            st.text(f"Pregunta {i+1}: {p}")
            st.text(f"Respuesta: {r}")
            st.markdown("---")
        if st.button("Descargar Historial"):
            df_historial = pd.DataFrame(st.session_state.historial, columns=["Pregunta", "Respuesta"])
            st.download_button("üì• Descargar CSV", df_historial.to_csv(index=False), "historial.csv", "text/csv")

# Aqu√≠ comenzar√° el c√≥digo para las otras p√°ginas
elif navegacion == "üìä Dashboard":
    # Importar y ejecutar el c√≥digo del dashboard
    from dashboard import run_dashboard
    run_dashboard()
    
elif navegacion == "‚úèÔ∏è Editor":
    # Importar y ejecutar el c√≥digo del editor
    from editor import run_editor
    run_editor()
    
elif navegacion == "üì§ Exportador":
    # Importar y ejecutar el c√≥digo del exportador
    from exportador import run_exportador
    run_exportador()
    
elif navegacion == "ü§ñ Enriquecimiento IA":
    # Importar y ejecutar el c√≥digo de enriquecimiento de IA
    from ia_enriquecimiento import run_ia_enriquecimiento
    run_ia_enriquecimiento()
    
elif navegacion == "üó∫Ô∏è Mapeo de Datos":
    # Importar y ejecutar el c√≥digo de mapeo de datos
    from mapping_ai import run_mapping_ai
    run_mapping_ai()
    
elif navegacion == "üë• Control de Accesos":
    # Importar y ejecutar el c√≥digo de control de accesos
    from colaboracion import run_colaboracion
    run_colaboracion()
