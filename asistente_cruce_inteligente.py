"""
Asistente especializado para el cruce inteligente de datos.
Implementa un modo agente para proporcionar an√°lisis estructurado y recomendaciones.
"""

import streamlit as st
import pandas as pd
import time
import json
from typing import Dict, List, Any, Optional, Tuple
from api_context_fixed import make_api_request_agente, generar_contexto_datos
from api_fix import ensure_api_key_exists
from ui_components import stat_card, loading_animation, chat_message, data_card

# Asegurar que la API key est√© disponible
ensure_api_key_exists()

# Estilos para el asistente de cruce
CSS_CRUCE = """
<style>
    .cruce-header {
        font-size: 1.5rem;
        font-weight: 600;
        color: #FF4B4B;
        margin-bottom: 1rem;
    }
    
    .analysis-container {
        border-radius: 0.75rem;
        border: 1px solid #E0E4EB;
        background-color: white;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }
    
    .analysis-section {
        margin-bottom: 1.5rem;
        border-left: 4px solid #0068C9;
        padding-left: 1rem;
    }
    
    .analysis-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #0068C9;
        margin-bottom: 0.75rem;
        display: flex;
        align-items: center;
    }
    
    .analysis-title i {
        margin-right: 0.5rem;
    }
    
    .recommendation-item {
        background-color: #F0F7FF;
        padding: 0.75rem;
        border-radius: 0.5rem;
        margin-bottom: 0.5rem;
    }
    
    .finding-item {
        display: flex;
        align-items: flex-start;
        margin-bottom: 0.75rem;
    }
    
    .finding-number {
        min-width: 24px;
        height: 24px;
        background-color: #0068C9;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        margin-right: 0.75rem;
        font-size: 0.8rem;
    }
    
    .action-buttons {
        display: flex;
        gap: 0.75rem;
        margin-top: 1.5rem;
    }
</style>
"""

def inicializar_historial_cruce():
    """Inicializa el historial de consultas y respuestas del cruce inteligente."""
    if "cruce_historial" not in st.session_state:
        st.session_state.cruce_historial = []

def agregar_consulta_cruce(consulta: str, respuesta: Dict[str, Any]):
    """
    Agrega una consulta y su respuesta al historial del cruce inteligente.
    
    Args:
        consulta: La consulta realizada por el usuario
        respuesta: La respuesta completa del API (incluyendo metadatos)
    """
    if "cruce_historial" not in st.session_state:
        inicializar_historial_cruce()
    
    # Extraer el texto de la respuesta
    texto_respuesta = ""
    if "choices" in respuesta and len(respuesta["choices"]) > 0:
        texto_respuesta = respuesta["choices"][0]["message"]["content"]
    
    # Crear entrada en el historial
    entrada = {
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
        "consulta": consulta,
        "respuesta_texto": texto_respuesta,
        "respuesta_completa": respuesta
    }
    
    st.session_state.cruce_historial.append(entrada)

def mostrar_analisis_estructurado(respuesta_texto: str):
    """
    Muestra el an√°lisis de datos estructurado con un formato mejorado.
    
    Args:
        respuesta_texto: El texto de respuesta del agente
    """
    # Intentar separar las secciones del an√°lisis
    secciones = {}
    
    try:
        # Buscar exactamente el formato esperado del agente
        if "üìä AN√ÅLISIS:" in respuesta_texto:
            # Separar an√°lisis
            partes = respuesta_texto.split("üìä AN√ÅLISIS:")
            if len(partes) > 1:
                # Eliminar cualquier texto previo a las secciones estructuradas
                contenido_estructurado = partes[1]
                
                # Separar las tres secciones
                if "üîç HALLAZGOS:" in contenido_estructurado:
                    analisis, resto = contenido_estructurado.split("üîç HALLAZGOS:", 1)
                    secciones["analisis"] = analisis.strip()
                    
                    if "üìà RECOMENDACIONES:" in resto:
                        hallazgos, recomendaciones = resto.split("üìà RECOMENDACIONES:", 1)
                        secciones["hallazgos"] = hallazgos.strip()
                        secciones["recomendaciones"] = recomendaciones.strip()
                    else:
                        # Solo hallazgos, sin recomendaciones
                        secciones["hallazgos"] = resto.strip()
                else:
                    # Solo an√°lisis, sin hallazgos ni recomendaciones
                    secciones["analisis"] = contenido_estructurado.strip()
        
        # Si se pudieron extraer las secciones, mostrarlas con formato mejorado
        if "analisis" in secciones:
            st.markdown(f"""
            <div class="analysis-container">
                <div class="analysis-section">
                    <div class="analysis-title"><i>üìä</i> An√°lisis de los Datos</div>
                    <div>{secciones['analisis']}</div>
                </div>
            """, unsafe_allow_html=True)
              # Mostrar hallazgos si existen
            if "hallazgos" in secciones:
                # Intentar separar los hallazgos individuales
                hallazgos_texto = secciones["hallazgos"]
                hallazgos_items = []
                
                # Buscar items numerados o con vi√±etas usando una expresi√≥n regular m√°s robusta
                import re
                # Buscar patrones como "1. ", "1) ", "- ", "‚Ä¢ "
                matches = re.findall(r'(?:\d+[\.\)]\s*|\-\s*|\‚Ä¢\s*)(.+?)(?=\n\s*\d+[\.\)]\s*|\n\s*[\-\‚Ä¢]\s*|$)', hallazgos_texto, re.DOTALL)
                
                if matches:
                    hallazgos_items = [m.strip() for m in matches if m.strip()]
                else:
                    # Si no se pudieron separar, dividir por l√≠neas
                    hallazgos_items = [h.strip() for h in hallazgos_texto.split('\n') if h.strip()]
                
                st.markdown("""
                <div class="analysis-section">
                    <div class="analysis-title"><i>üîç</i> Hallazgos Principales</div>
                """, unsafe_allow_html=True)
                
                for i, hallazgo in enumerate(hallazgos_items, 1):
                    # Eliminar numeraci√≥n o vi√±etas existentes al principio
                    hallazgo_limpio = re.sub(r'^\s*\d+[\.\)]\s*|\s*[\-\‚Ä¢]\s*', '', hallazgo)
                    
                    st.markdown(f"""
                    <div class="finding-item">
                        <div class="finding-number">{i}</div>
                        <div>{hallazgo_limpio}</div>
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown("</div>", unsafe_allow_html=True)
              # Mostrar recomendaciones si existen
            if "recomendaciones" in secciones:
                # Intentar separar las recomendaciones individuales
                recomendaciones_texto = secciones["recomendaciones"]
                recomendaciones_items = []
                
                # Buscar items numerados o con vi√±etas usando una expresi√≥n regular m√°s robusta
                import re
                # Buscar patrones como "1. ", "1) ", "- ", "‚Ä¢ "
                matches = re.findall(r'(?:\d+[\.\)]\s*|\-\s*|\‚Ä¢\s*)(.+?)(?=\n\s*\d+[\.\)]\s*|\n\s*[\-\‚Ä¢]\s*|$)', recomendaciones_texto, re.DOTALL)
                
                if matches:
                    recomendaciones_items = [m.strip() for m in matches if m.strip()]
                else:
                    # Si no se pudieron separar, dividir por l√≠neas
                    recomendaciones_items = [r.strip() for r in recomendaciones_texto.split('\n') if r.strip()]
                
                st.markdown("""
                <div class="analysis-section">
                    <div class="analysis-title"><i>üìà</i> Recomendaciones</div>
                """, unsafe_allow_html=True)
                
                for recomendacion in recomendaciones_items:
                    # Eliminar numeraci√≥n o vi√±etas existentes al principio
                    recomendacion_limpia = re.sub(r'^\s*\d+[\.\)]\s*|\s*[\-\‚Ä¢]\s*', '', recomendacion)
                    
                    if recomendacion_limpia.strip():
                        st.markdown(f"""
                        <div class="recommendation-item">
                            {recomendacion_limpia}
                        </div>
                        """, unsafe_allow_html=True)
                
                st.markdown("</div>", unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
        else:
            # Si no se pudieron extraer las secciones, mostrar la respuesta completa
            st.markdown(f"""
            <div class="analysis-container">
                <div class="analysis-section">
                    <div class="analysis-title"><i>üìã</i> Resultado del An√°lisis</div>
                    <div>{respuesta_texto}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
    except Exception as e:
        # En caso de error, mostrar la respuesta completa
        st.error(f"Error al formatear la respuesta: {str(e)}")
        st.markdown(f"""
        <div class="analysis-container">
            <div class="analysis-section">
                <div class="analysis-title"><i>üìã</i> Resultado del An√°lisis</div>
                <div>{respuesta_texto}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)

def exportar_historial_cruce():
    """Permite exportar el historial de an√°lisis de cruce inteligente."""
    if "cruce_historial" in st.session_state and st.session_state.cruce_historial:
        # Preparar datos para exportaci√≥n
        datos_exportacion = []
        
        for entrada in st.session_state.cruce_historial:
            datos_exportacion.append({
                "Fecha y Hora": entrada["timestamp"],
                "Consulta": entrada["consulta"],
                "Respuesta": entrada["respuesta_texto"]
            })
        
        # Convertir a DataFrame para facilitar la exportaci√≥n
        df_exportacion = pd.DataFrame(datos_exportacion)
        
        # Ofrecer botones de descarga
        col1, col2 = st.columns(2)
        
        with col1:
            st.download_button(
                label="üì• Descargar como CSV",
                data=df_exportacion.to_csv(index=False),
                file_name=f"historial_cruce_{time.strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        with col2:
            buffer = pd.ExcelWriter(f"historial_cruce_{time.strftime('%Y%m%d_%H%M%S')}.xlsx", engine="xlsxwriter")
            df_exportacion.to_excel(buffer, index=False, sheet_name="Historial")
            buffer.close()
            
            with open(f"historial_cruce_{time.strftime('%Y%m%d_%H%M%S')}.xlsx", "rb") as f:
                st.download_button(
                    label="üì• Descargar como Excel",
                    data=f,
                    file_name=f"historial_cruce_{time.strftime('%Y%m%d_%H%M%S')}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

def run_asistente_cruce_inteligente():
    """Ejecuta el asistente de cruce inteligente en modo agente."""
    # Inyectar CSS personalizado
    st.markdown(CSS_CRUCE, unsafe_allow_html=True)
    
    # Inicializar historial
    inicializar_historial_cruce()
    
    # Verificar si hay datos cargados
    if 'base_df' not in st.session_state or 'new_df' not in st.session_state:
        st.warning("‚ö†Ô∏è Carga primero los archivos BASE y NUEVO para utilizar el asistente de cruce inteligente.")
        return
      # Encabezado del asistente
    st.markdown("<div class='cruce-header'>üß† Asistente de Cruce Inteligente</div>", unsafe_allow_html=True)
    st.markdown("""
    Este asistente te ayudar√° a analizar los datos cargados y obtener recomendaciones 
    para optimizar el cruce de informaci√≥n. 
    
    **Funciona en modo agente estructurado**, proporcionando:
    1. üìä **An√°lisis detallado** de los datos
    2. üîç **Hallazgos espec√≠ficos** basados en patrones y relaciones
    3. üìà **Recomendaciones accionables** para mejorar el cruce de datos
    
    A diferencia de un chat normal, este asistente especializado organiza la informaci√≥n 
    en secciones estructuradas para facilitar la comprensi√≥n y aplicaci√≥n.
    """)
    
    # Secci√≥n de estad√≠sticas
    with st.expander("üìä Estad√≠sticas de los datos cargados", expanded=True):
        col1, col2, col3 = st.columns(3)
        
        base_df = st.session_state['base_df']
        new_df = st.session_state['new_df']
        
        with col1:
            stat_card(
                title="Registros en archivo BASE", 
                value=len(base_df), 
                icon="üìã"
            )
        
        with col2:
            stat_card(
                title="Registros en archivo NUEVO", 
                value=len(new_df), 
                icon="üìÑ"
            )
        
        with col3:
            # Calcular porcentaje de coincidencias si existe
            if 'coincidencias' in st.session_state and st.session_state['coincidencias']:
                coincidencias = len(st.session_state['coincidencias'])
                porcentaje = (coincidencias / len(new_df)) * 100
                stat_card(
                    title="Coincidencias encontradas", 
                    value=coincidencias, 
                    delta=f"{porcentaje:.1f}%", 
                    icon="üîç"
                )
            else:
                stat_card(
                    title="Coincidencias encontradas", 
                    value="No disponible", 
                    icon="üîç"
                )
    
    # Separador
    st.divider()
    
    # Secci√≥n de consulta al agente
    st.markdown("### üí¨ Consulta al Agente de Datos")
    
    # Preguntas sugeridas
    with st.expander("üîç Preguntas sugeridas", expanded=True):
        sugerencias = [
            "Analiza las columnas de ambos archivos y sugiere los mejores campos para realizar el cruce",
            "¬øQu√© calidad tienen los datos para realizar un cruce efectivo?",
            "Identifica posibles problemas en los datos que puedan afectar al cruce",
            "Sugiere estrategias para mejorar el porcentaje de coincidencias",
            "¬øQu√© pre-procesamiento recomiendas aplicar a los datos antes del cruce?",
            "Analiza las diferencias entre los registros no coincidentes"
        ]
        
        cols = st.columns(2)
        for i, sugerencia in enumerate(sugerencias):
            col = cols[i % 2]
            if col.button(sugerencia, key=f"sugerencia_{i}", use_container_width=True):
                # Guardar la sugerencia seleccionada para procesarla despu√©s
                st.session_state["consulta_seleccionada"] = sugerencia
                st.rerun()
    
    # Input para la consulta
    consulta = st.text_area(
        "Escribe tu consulta o instrucci√≥n para el agente",
        value=st.session_state.get("consulta_seleccionada", ""),
        height=100,
        placeholder="Ejemplo: Analiza los datos y sugiere la mejor estrategia para el cruce"
    )
      # Bot√≥n para enviar consulta
    if st.button("üß† Analizar con IA", use_container_width=True, type="primary"):
        if not consulta.strip():
            st.warning("Por favor, escribe una consulta o selecciona una de las sugerencias.")
        else:
            # Mostrar indicador de carga y mensaje explicativo
            with st.spinner("El agente est√° analizando tus datos..."):
                st.info("El agente proporcionar√° una respuesta estructurada con an√°lisis, hallazgos y recomendaciones, no un chat normal.")
                try:
                    # Realizar la consulta a la API en modo agente
                    respuesta = make_api_request_agente(consulta.strip())
                    
                    # Guardar en el historial
                    agregar_consulta_cruce(consulta.strip(), respuesta)
                    
                    # Obtener texto de respuesta
                    if "choices" in respuesta and len(respuesta["choices"]) > 0:
                        respuesta_texto = respuesta["choices"][0]["message"]["content"]
                        
                        # Mostrar la consulta y respuesta
                        st.subheader("üìù Tu consulta")
                        st.info(consulta)
                        
                        st.subheader("üß† An√°lisis del agente")
                        mostrar_analisis_estructurado(respuesta_texto)
                    else:
                        st.error("No se pudo obtener una respuesta v√°lida del agente.")
                except Exception as e:
                    st.error(f"Error al procesar la consulta: {str(e)}")
    
    # Historial de an√°lisis
    if st.session_state.cruce_historial:
        st.divider()
        with st.expander("üìú Historial de an√°lisis", expanded=False):
            st.markdown("### An√°lisis anteriores")
            
            # Mostrar entradas del historial (las 5 m√°s recientes)
            for i, entrada in enumerate(reversed(st.session_state.cruce_historial[-5:])):
                with st.container():
                    st.markdown(f"**Consulta {len(st.session_state.cruce_historial) - i}** ({entrada['timestamp']})")
                    st.info(entrada["consulta"])
                    
                    if st.button(f"Ver an√°lisis completo #{len(st.session_state.cruce_historial) - i}", key=f"ver_{i}"):
                        mostrar_analisis_estructurado(entrada["respuesta_texto"])
                
                st.divider()
            
            # Opci√≥n para exportar
            st.markdown("### Exportar historial")
            exportar_historial_cruce()

if __name__ == "__main__":
    st.set_page_config(
        page_title="Asistente de Cruce Inteligente",
        page_icon="üß†",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    run_asistente_cruce_inteligente()